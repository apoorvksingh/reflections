1>What happens when you initialise a repository? Why do you need to do it?

1>Git will create the required metadata files that’ll store the information required for maintaining the repository and commits. If we do not initialise the repository, we would have no way to track the changes and would end up simply working with a normal folder



2>How is the staging area different from the working directory and the repository?
What value do you think it offers?

2> The staging area essentially serves as an intermediary where we can keep the files we are working on before we finally make a commit. This is different from the working directory and and the repository as the files in the staging area are in a sort of transitional state.



3>How can you use the staging area to make sure you have one commit per logical
change?

3> we can only add files to the staging area once we are sure that we have made the required changes. in addition we can view the difference between the file in the staging area and the most recent commit using the git diff —staging command.



4>What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

4>Branches can help when i would want to try out new features or keep different options of the same file. In this case i could easily have the original ones to revert to if needed.



5>How do the diagrams help you visualize the branch structure?

5> Branches allow us to visualise how the entire commit history is structured, including where we have made new branches to identify which would be the last commit in master that was built upon by the branches and see what would be the feature differences in the commits of the different branches.




6>What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

6> The changes made in the two branches would be merged into a single file allowing us to incorporate the new tested functionalities for eg. Representing it in the diagram format allows us to visualise where the merge was done to identify any commits that are not a part of the merged commit anymore and also the commits that are.




7>What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

7>automatic merging allows for the code that does not conflict in the two files seamlessly thus saving time. manual merging would allow us to ensure that the sanctity and efficiency of the code is maintained